#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <iostream>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

// #define TEST_TIME

#define offsetof(TYPE,MEMBER) ((int) &((TYPE *)0)->MEMBER)

#define container_of(ptr, type, member) \
    (type *)((char *)(ptr) - (char *) &((type *)0)->member)

struct sock
{
	int sk_err;
};

struct sk_buff
{
	struct sock *sk;
	int priority;
};

struct netlink_callback {
	struct sk_buff		*skb;
};

struct netlink_sock {
	struct sock		sk;
	struct netlink_callback	cb;

	netlink_sock(int arg){
		sk.sk_err = arg;
	}
};

struct pthread_args
{
	void* sk;
	int thread_id;
};

static inline struct netlink_sock *nlk_sk(struct sock *sk)
{
	return container_of(sk, struct netlink_sock, sk);
}

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int cnt = 1;

void* netlink_dump(void* sk){

	struct netlink_sock *nlk = nlk_sk((struct sock*)sk);
	printf("sk %p, nlk %p, &nlk->cb %p\n", sk, nlk, &(nlk->cb));
	struct netlink_callback *cb;
	struct sk_buff *skb = NULL;

	printf("%x: mutex %p\n", (unsigned int)pthread_self(), &mutex);
	pthread_mutex_lock(&mutex);

	cb = &nlk->cb;

	if(!skb)
	{
		skb = (struct sk_buff*)malloc(cnt*sizeof(struct sk_buff));
		cnt *= 4;
	}

	skb->sk = (struct sock*)sk;
	cb->skb = skb;

	pthread_mutex_unlock(&mutex);
	
	usleep(100);
	free(cb->skb);

	return NULL;
}

int main()
{
#ifdef TEST_TIME
	static double run_time_begin;
	static double run_time_end;
	static double run_time_total;
	run_time_begin = clock();
#endif 

	pthread_t t1, t2;
	
	struct netlink_sock *nlk_sk = new netlink_sock(5);
	struct sock* sk= &nlk_sk->sk;

	pthread_create(&t1, NULL, netlink_dump, sk);
	pthread_create(&t2, NULL, netlink_dump, sk);

	pthread_join(t1, NULL);
	pthread_join(t2, NULL);

	delete nlk_sk;

	printf("\nprogram-successful-exit\n");
#ifdef TEST_TIME
	run_time_end = clock();
	run_time_total = run_time_end - run_time_begin;
	printf("test-the-total-time: %.3lf\n", (double)(run_time_total/CLOCKS_PER_SEC)*1000);
#endif
	return 0;
}
